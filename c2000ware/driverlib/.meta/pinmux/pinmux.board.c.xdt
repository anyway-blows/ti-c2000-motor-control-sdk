% let Common   = system.getScript("/driverlib/Common.js");
% let DriverlibPinmap   = system.getScript("/driverlib/pinmux/driverlib_pinmap.js");
% let keys = Object.keys(system.modules).sort();
% let skipPinMuxPeripheral = ["inputxbar", "clb_inputxbar", "usb", "dcdc"];
% let pinmux_h_source_mode = 3
% let csv_mode = 1
% let function_mode = 2
% let pinmux_c_source_mode = 0
% var output_mode = pinmux_c_source_mode
% var gpio_to_find = ""
% if (args[0] == "csv")
% {
%	output_mode = csv_mode
Used GPIO,Selected Mode
% }
% else if (args[0] == "function")
% {
%	output_mode = function_mode
%	gpio_to_find = args[1]
% }
% else if (args[0] == "header")
% {
%	output_mode = pinmux_h_source_mode
% }
% else
% {
%	output_mode = pinmux_c_source_mode
% }
% /* loop over all modules in the current configuration */
% for (let modIndex = 0; modIndex < keys.length; modIndex++) {
	% let mod = system.modules[keys[modIndex]];
	% var nameOfPeripheral = mod.peripheralName;
	% var nameOfModule = mod.$name.replace("/driverlib/", "").replace(".js", "");
	% var module = system.modules['/driverlib/' + nameOfModule + '.js'];
	% var skip = false;
	% for (var skipModuleIndex in skipPinMuxPeripheral)
	% {
	%	//console.log("Skipping: ");
	%	//console.log(skipPinMuxPeripheral[skipModuleIndex]);
	%	if (skipPinMuxPeripheral[skipModuleIndex] == nameOfModule)
	%	{	skip = true;	}
	% }
	%if (module != null && module.peripheralName != "GPIO" && 
	%	 module.peripheralName != "AIO" && 
	%	 !skip && module.peripheralName != null &&
	%	 module.peripheralName != "EPWMXBAR" &&
	%	 module.peripheralName != "CLBXBAR" &&
	%	 module.peripheralName != "CLB" &&
	%	 module.peripheralName != "ECAP" &&
	%	 module.peripheralName != "ERAD")
	%{
		% //console.log("Standard Pinmux");
		% for(var i = 0; i < module.$instances.length; i++) {
			% var instance = module.$instances[i];
			% let instancePinmux = instance[nameOfModule];
			% let solution    = instancePinmux.$solution;
			% let peripheral  = system.deviceData.peripherals[solution.peripheralName];
			% var InterfaceNames = Object.keys(system.deviceData.interfaces[nameOfPeripheral].interfacePins);
			% if (output_mode == pinmux_c_source_mode) {
	//`peripheral.name` -> `instance.$name` Pinmux
			% }
			% for (var interfaceNumber in InterfaceNames)
			% {
			%	var interfaceName = InterfaceNames[interfaceNumber];
			%	let pinName =  interfaceName.toLowerCase().replace("#", "").replace("@", "") + "Pin";
			% 	if (instance[nameOfModule][pinName] != null){
				%	var aioName;
				%	var gpioName;
				%	var gpioNumber;
				%	if (!instance[nameOfModule][pinName].$solution.devicePinName.includes("GPIO"))
				%	{
				%		//AIO used for digital				
				% 		var selectedName = instance[nameOfModule][pinName].$solution.devicePinName;
				%		var selecteddevicePin = null;
				%		for (const pinNumber in system.deviceData.devicePins) {
				%			if (system.deviceData.devicePins[pinNumber].designSignalName == selectedName)
				%			{
				%				selecteddevicePin = system.deviceData.devicePins[pinNumber];
				%				break;
				%			}
				%		}
				%		if (selecteddevicePin != null)
				%		{
				%			aioName = selecteddevicePin.mux.muxSetting[0].peripheralPin.name;
				%			console.log(aioName);
				%			gpioName = aioName.replace("AIO", "GPIO");
				% 			gpioNumber = gpioName.substring(4);
				%			console.log(gpioName);
				%			gpioNumber = Common.gpioNameToNumber(gpioNumber);
				%			console.log(gpioNumber);
				%		}
				%	} else 
				%	{
				% 		gpioName = instance[nameOfModule][pinName].$solution.devicePinName;
				% 		gpioNumber = gpioName.substring(4);
				%		gpioNumber = Common.gpioNameToNumber(gpioNumber);
				%	}
				%   if (output_mode == pinmux_c_source_mode) {
	GPIO_setPinConfig(GPIO_`gpioNumber`_`DriverlibPinmap.getDriverlibName(interfaceName, peripheral.name)`);
				%		if (peripheral.name.includes("I2C")) { console.log("HI");
	GPIO_setPadConfig(`gpioNumber`, GPIO_PIN_TYPE_PULLUP);
	GPIO_setQualificationMode(`gpioNumber`, GPIO_QUAL_ASYNC);
				%		}
				%   } else if (output_mode == pinmux_h_source_mode) {
#define GPIO_PIN_`DriverlibPinmap.getDriverlibName(interfaceName, peripheral.name)` `gpioNumber`
				%   } else if (output_mode == function_mode) { 
				%		if (gpio_to_find == "GPIO"+gpioNumber) {
`DriverlibPinmap.getDriverlibName(interfaceName, peripheral.name)`
				%		}
				% 	} else if (output_mode == csv_mode) {
GPIO`gpioNumber`,`DriverlibPinmap.getDriverlibName(interfaceName, peripheral.name)`
				%	}
				%}
			% }
		%}
	%}
	%else if (module != null && module.peripheralName == "GPIO")
	%{
		% for(var i = 0; i < module.$instances.length; i++) {
			% var instance = module.$instances[i];
			% var gpioName = instance.gpioPin.$solution.devicePinName;
			%   if (output_mode == pinmux_c_source_mode) {
	//`gpioName` -> `instance.$name` Pinmux
			%	}
			% var gpioNumber = gpioName.substring(4);
			% gpioNumber = Common.gpioNameToNumber(gpioNumber);
			% if (output_mode == pinmux_c_source_mode) {
	GPIO_setPinConfig(GPIO_`gpioNumber`_`"GPIO" + gpioNumber`);
			% } else if (output_mode == function_mode){
			%		if (gpio_to_find == "GPIO"+gpioNumber) {
GPIO`gpioNumber`
			%		}
			% }	else if (output_mode == csv_mode){
GPIO`gpioNumber`,GPIO`gpioNumber`
			% }
		%}
	%}
	%else if (module != null && module.peripheralName == "AIO")
	%{
		% for(var i = 0; i < module.$instances.length; i++) {
			% var instance = module.$instances[i];
			% let peripheral  = system.deviceData.peripherals[instance.aioPin.$solution.peripheralName];
			% var aioName = peripheral.name;
			% if (output_mode == pinmux_c_source_mode) {
	//`aioName` -> `instance.$name` Pinmux
			% }
			% var gpioNumber = aioName.substring(2);
			% gpioNumber = Common.gpioNameToNumber(gpioNumber);
			% if (output_mode == pinmux_h_source_mode) {
#define GPIOPIN_AIO`gpioNumber` `gpioNumber`
			% } else if (output_mode == pinmux_c_source_mode) {
	GPIO_setPinConfig(GPIO_`gpioNumber`_`"GPIO" + gpioNumber`);
	GPIO_setAnalogMode(`gpioNumber`, GPIO_ANALOG_DISABLED);
			% } else if (output_mode == function_mode) {
			%		if (gpio_to_find == "AIO"+gpioNumber) {
AIO`gpioNumber`
			%		}
			% } else if (output_mode == csv_mode){
GPIO`gpioNumber`,GPIO`gpioNumber` 
			% }
		%}
	%}
	%else if (module != null && module.peripheralName == "USB")
	%{
		% for(var i = 0; i < module.$instances.length; i++) {
			% var instance = module.$instances[i];
			% if (output_mode == pinmux_c_source_mode) {
	//USB pinmux
	GPIO_setAnalogMode(42, GPIO_ANALOG_ENABLED);
	GPIO_setAnalogMode(43, GPIO_ANALOG_ENABLED);
			% } else if (output_mode == function_mode) {
			%		if (gpio_to_find == "GPIO42") {
USB
			%		}
			%		else if (gpio_to_find == "GPIO43") {
USB
			%		}				
			%} else if (output_mode == csv_mode){
GPIO42,USB
GPIO43,USB
			% }
		%}
	%}
	%else if (module != null && module.peripheralName == "DC-DC")
	%{
		% for(var i = 0; i < module.$instances.length; i++) {
			% var instance = module.$instances[i];
			% if (output_mode == pinmux_c_source_mode) {
	//DC-DC pinmux
	GPIO_setAnalogMode(22, GPIO_ANALOG_ENABLED);
	GPIO_setAnalogMode(23, GPIO_ANALOG_ENABLED);
			% } else if (output_mode == function_mode) {
			%		if (gpio_to_find == "GPIO22_VFBSW") {
DCDC
			%		}
			%		else if (gpio_to_find == "GPIO23_VSW") {
DCDC
			%		}				
			%} else if (output_mode == csv_mode){
GPIO22,DCDC
GPIO23,DCDC
			% }
		%}
	%}
%}