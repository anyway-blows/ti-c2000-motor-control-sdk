%##############################################################################
% \file   reference/MATLAB/$FILENAME$
% \brief  generate the Exponential lookup table
% \author Vishal Coelho
% \date   01/05/2017
%
% Copyright (C) $YEAR$ Texas Instruments Incorporated - http://www.ti.com/
% ALL RIGHTS RESERVED
%##############################################################################
% $TI Release:  $
% $Release Date:  $
%##############################################################################

%% Exponential Table Generation Function
%  This function generates the exponent constants and table
%
%% Required Parameters
%
%% Optional Parameters
% * *precision*, (opt) can be 'TYPE_FLOAT' or 'TYPE_DOUBLE', defaults to
%    float
% * *filename*, (opt) name of assembly file to write the table to. This is
%         an optional argument
% The filenames can only have a .asm or .c extension
%
%% Returns
% *T*, the table



%% Function Prototype
%  An Example: Generate a 64 3-tuple arcsine table (64*3 entries)
%
%  FPU_FastRTS_genTableExp('TYPE_FLOAT', 'exptable_f32.asm')
%  FPU_FastRTS_genTableExp('TYPE_DOUBLE', 'exptable_f64.asm')
%
function T = FPU_FastRTS_genTableExp(varargin)

%% Parse Arguments
nOptArgs = 2;
numvarargs = length(varargin);
if numvarargs > nOptArgs
    error('myfunc:TooManyInputs',...
        ['requires at most ',num2str(nArgs),' optional input(s)']);
end

% Assign optional argument
optArgs = {'TYPE_FLOAT','NULL'};

% Check contents of varargin: if empty skip
newVals = cellfun(@(x) ~isempty(x), varargin);

% now put these defaults into the valuesToUse cell array,
% and overwrite the ones specified in varargin.
optArgs(newVals) = varargin(newVals);
% or ...
% [optargs{1:numvarargs}] = varargin{:};

% Place optional args in memorable variable names
[precision, filename] = optArgs{:};

% filename must have an asm or c extenstion
if (~strcmp(filename,'NULL'))
    [~,~,ext] = fileparts(filename);
    assert((strcmp(ext,'.asm') || strcmp(ext,'.c')), ['Filename needs to',...
      'have an .asm or .c extension']);
end

if (strcmp(precision,'TYPE_FLOAT'))
    ftype = 'float';
elseif (strcmp(precision,'TYPE_DOUBLE'))
    if(strcmp(ext,'.c'))
        ftype = 'long double';
    else
        ftype = 'xldouble';
    end
else
    assert(0,'precision needs to be "TYPE_FLOAT" or "TYPE_DOUBLE"');
end
%% Table Generation (Double-Precision)
format long
if (strcmp(precision,'TYPE_FLOAT'))
    N = floor(log(realmax('single')));
elseif (strcmp(precision,'TYPE_DOUBLE'))
    N = floor(log(realmax('double')));
else
    assert(0,'precision needs to be "TYPE_FLOAT" or "TYPE_DOUBLE"');
end

n = 0:N;
T = exp(n);

FPUINV1  = double(1);
FPUINV2  = double(1/2);
FPUINV3  = double(1/3);
FPUINV4  = double(1/4);
FPUINV5  = double(1/5);
FPUINV6  = double(1/6);
FPUINV7  = double(1/7);
FPUINV8  = double(1/8);
FPUINV9  = double(1/9);
FPUINV10 = double(1/10);
FPUINV11 = double(1/11);
FPUINV12 = double(1/12);
FPUINV13 = double(1/13);
FPUINV14 = double(1/14);
FPULOG10 = log10(exp(1));


%% Formatted print to .asm file
if (~strcmp(filename,'NULL') && strcmp(ext,'.asm'))
    HEAD_string = [';;',repmat(sprintf('#'), 1, 77),'\n'];
    BODY_string = [';;',repmat(sprintf('*'), 1, 77),'\n'];
    fid = fopen(filename,'w');
    fprintf(fid,HEAD_string);
    fprintf(fid,[';;! \\file ',filename,'\n',...
                 ';;! \\brief  Exponent Lookup Table (',num2str(N+1),') \n',...
                 ';;! \\author Vishal Coelho \n',...
                 ';;! \\date   ',date,'\n;;! \n;;\n',...
                 ';;  Group:\t\t\tC2000\n',...
                 ';;  Target Family:\t$DEVICE$\n;;\n',...
                 ';; Copyright (C) $YEAR$ Texas Instruments Incorporated',...
                 '- http://www.ti.com/ \n',...
                 ';; ALL RIGHTS RESERVED\n',...
                 HEAD_string,...
                 ';;$TI Release: PACKAGE NAME $\n',...
                 ';;$Release Date: PACKAGE RELEASE DATE $\n',...
                 HEAD_string,...
                 '\n',...
                 '\t.def\t_FPUexpTableCoeff\n',...
                 '\t.def\t_FPUexpTableCoeffEnd\n',...
                 '\t.def\t_FPUexpTable\n',...
                 '\t.def\t_FPUexpTableEnd\n',...
                 '\n',...
                 '\t.sect\t"FPUmathTables"\n',...
                 '\n']);
                 
if (strcmp(precision,'TYPE_DOUBLE'))
    fprintf(fid,['_FPUexpTableCoeff:\n',...
        '\t.', ftype, '%16.13f \t; 1/14\n',...
        '\t.', ftype, '%16.13f \t; 1/13\n',...
        '\t.', ftype, '%16.13f \t; 1/12\n',...
        '\t.', ftype, '%16.13f \t; 1/11\n',...
        '\t.', ftype, '%16.13f \t; 1/10\n',...
        '\t.', ftype, '%16.13f \t; 1/9\n',...
        '\t.', ftype, '%16.13f \t; 1/8\n',...
        '\t.', ftype, '%16.13f \t; 1/7\n',...
        '\t.', ftype, '%16.13f \t; 1/6\n',...
        '\t.', ftype, '%16.13f \t; 1/5\n',...
        '\t.', ftype, '%16.13f \t; 1/4\n',...
        '\t.', ftype, '%16.13f \t; 1/3\n',...
        '\t.', ftype, '%16.13f \t; 1/2\n',...
        '_FPUexpTableCoeffEnd:\n\n'], FPUINV14, FPUINV13, FPUINV12,...
        FPUINV11, FPUINV10, FPUINV9, FPUINV8, FPUINV7,...
        FPUINV6, FPUINV5, FPUINV4, FPUINV3, FPUINV2);
else    fprintf(fid,['_FPUexpTableCoeff:\n',...
        '\t.', ftype, '%16.13f \t; 1/7\n',...
        '\t.', ftype, '%16.13f \t; 1/6\n',...
        '\t.', ftype, '%16.13f \t; 1/5\n',...
        '\t.', ftype, '%16.13f \t; 1/4\n',...
        '\t.', ftype, '%16.13f \t; 1/3\n',...
        '\t.', ftype, '%16.13f \t; 1/2\n',...
        '_FPUexpTableCoeffEnd:\n\n'], FPUINV7,...
        FPUINV6, FPUINV5, FPUINV4, FPUINV3, FPUINV2);
end

                 
    % Start the Table
fprintf(fid,'_FPUexpTable:\n');
    for i = 1 : N+1
        n = i - 1;
        S = sprintf('\t.%s\t%16.13e\t\t; exp(%3d)\n',...
            ftype, T(i), n);
        fprintf(fid,S);
    end
    
    % End the Table
    fprintf(fid, ['_FPUexpTableEnd:\n',...
        '\n;; End of File\n']);
    fclose(fid);
end

%% Formatted print to .c file
if (~strcmp(filename,'NULL') && strcmp(ext,'.c'))
    HEAD_string = ['//',repmat(sprintf('#'), 1, 77),'\n'];
    BODY_string = ['//',repmat(sprintf('*'), 1, 77),'\n'];
    fid = fopen(filename,'w');
    fprintf(fid,HEAD_string);
    fprintf(fid,['//! \\file ',filename,'\n',...
        '//! \\brief  Exponent Lookup Table (',num2str(N+1),') \n',...
        '//! \\author Vishal Coelho \n',...
        '//! \\date   ',date,'\n//! \n//\n',...
        '//  Group:\t\t\tC2000\n',...
        '//  Target Family:\t$DEVICE$\n//\n',...
        '// Copyright (C) $YEAR$ Texas Instruments Incorporated',...
        '- http://www.ti.com/ \n',...
        '// ALL RIGHTS RESERVED\n',...
        HEAD_string,...
        '//$TI Release: PACKAGE NAME $\n',...
        '//$Release Date: PACKAGE RELEASE DATE $\n',...
        HEAD_string,...
        '\n']);
    
    
    if(strcmp(precision, 'TYPE_FLOAT'))
        fprintf(fid,...
           ['const ', ftype, ' FPUINV1  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV2  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV3  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV4  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV5  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV6  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV7  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV8  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV9  = %16.13fF; \n',...
            'const ', ftype, ' FPUINV10 = %16.13fF; \n',...
            'const ', ftype, ' FPUINV11 = %16.13fF; \n',...
            'const ', ftype, ' FPUINV12 = %16.13fF; \n',...
            'const ', ftype, ' FPUINV13 = %16.13fF; \n',...
            'const ', ftype, ' FPUINV14 = %16.13fF; \n',...
            'const ', ftype, ' FPULOG10 = %16.13fF; \n',...
            '\n',...
            '//This table has ',num2str(N+1),' entries\n',...
            'const ',ftype,' FastRTS_expTable[',num2str(N+1),...
            '] = {\n'], FPUINV1, FPUINV2, FPUINV3,...
                 FPUINV4, FPUINV5, FPUINV6, FPUINV7, FPUINV8,...
                 FPUINV9, FPUINV10, FPUINV11, FPUINV12, FPUINV13,...
                 FPUINV14, FPULOG10);
    else %precision == 'TYPE_DOUBLE'
        fprintf(fid,...
           ['const ', ftype, ' FPUINV1  = %16.13f; \n',...
            'const ', ftype, ' FPUINV2  = %16.13f; \n',...
            'const ', ftype, ' FPUINV3  = %16.13f; \n',...
            'const ', ftype, ' FPUINV4  = %16.13f; \n',...
            'const ', ftype, ' FPUINV5  = %16.13f; \n',...
            'const ', ftype, ' FPUINV6  = %16.13f; \n',...
            'const ', ftype, ' FPUINV7  = %16.13f; \n',...
            'const ', ftype, ' FPUINV8  = %16.13f; \n',...
            'const ', ftype, ' FPUINV9  = %16.13f; \n',...
            'const ', ftype, ' FPUINV10 = %16.13f; \n',...
            'const ', ftype, ' FPUINV11 = %16.13f; \n',...
            'const ', ftype, ' FPUINV12 = %16.13f; \n',...
            'const ', ftype, ' FPUINV13 = %16.13f; \n',...
            'const ', ftype, ' FPUINV14 = %16.13f; \n',...
            'const ', ftype, ' FPULOG10 = %16.13f; \n',...
            '\n',...
            '//This table has ',num2str(N+1),' entries\n',...
            'const ',ftype,' FastRTS_expTable[',num2str(N+1),...
            '] = {\n'], FPUINV1, FPUINV2, FPUINV3,...
                 FPUINV4, FPUINV5, FPUINV6, FPUINV7, FPUINV8,...
                 FPUINV9, FPUINV10, FPUINV11, FPUINV12, FPUINV13,...
                 FPUINV14, FPULOG10);
    end
    for i = 1 : N+1
        n = i - 1;
        if(strcmp(precision, 'TYPE_FLOAT'))
            S = sprintf(['\t%16.13eF, // exp(%3d)\n'],...
                T(i),n);
        else %precision == 'TYPE_DOUBLE'
            S = sprintf(['\t%16.13e, // exp(%3d)\n'],...
                T(i),n);
        end
        
        fprintf(fid,S);
    end
    fprintf(fid,['}; \n\n',...
        '\n// End of File\n']);
    fclose(fid);
end

%%
% End of file
