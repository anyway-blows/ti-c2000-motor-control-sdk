%%{
    let Common    = system.getScript("/utilities/clb_tool/clb_syscfg/source/Common.js");
    let mod       = system.modules['/utilities/clb_tool/clb_syscfg/source/TILE'];
    let instances = mod.$instances;
    let templ     = system.getTemplate;
%%}
/*
 *  ======== clb.c ========
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#include "driverlib.h"
#include "device.h"
#include "clb_config.h"
#include "clb.h"

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;

uint16_t `name`HLCInstr[CLB_NUM_HLC_INSTR + 1] =
{
    `name`_HLCINSTR_0,
    `name`_HLCINSTR_1,
    `name`_HLCINSTR_2,
    `name`_HLCINSTR_3,
    `name`_HLCINSTR_4,
    `name`_HLCINSTR_5,
    `name`_HLCINSTR_6,
    `name`_HLCINSTR_7,
    `name`_HLCINSTR_8,
    `name`_HLCINSTR_9,
    `name`_HLCINSTR_10,
    `name`_HLCINSTR_11,
    `name`_HLCINSTR_12,
    `name`_HLCINSTR_13,
    `name`_HLCINSTR_14,
    `name`_HLCINSTR_15,
    `name`_HLCINSTR_16,
    `name`_HLCINSTR_17,
    `name`_HLCINSTR_18,
    `name`_HLCINSTR_19,
    `name`_HLCINSTR_20,
    `name`_HLCINSTR_21,
    `name`_HLCINSTR_22,
    `name`_HLCINSTR_23,
    `name`_HLCINSTR_24,
    `name`_HLCINSTR_25,
    `name`_HLCINSTR_26,
    `name`_HLCINSTR_27,
    `name`_HLCINSTR_28,
    `name`_HLCINSTR_29,
    `name`_HLCINSTR_30,
    `name`_HLCINSTR_31
};

% }

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;

void init`name`(uint32_t base)
{
    uint16_t i;
% if (Common.isType2()) {
    // Pipeline Mode
    % if (inst.pipeline_mode) {
    CLB_enablePipelineMode(base);
    % } else {
    CLB_disablePipelineMode(base);
    % }
% }
    // Output LUT
    CLB_configOutputLUT(base, CLB_OUT0, `name`_CFG_OUTLUT_0);
    CLB_configOutputLUT(base, CLB_OUT1, `name`_CFG_OUTLUT_1);
    CLB_configOutputLUT(base, CLB_OUT2, `name`_CFG_OUTLUT_2);
    CLB_configOutputLUT(base, CLB_OUT3, `name`_CFG_OUTLUT_3);
    CLB_configOutputLUT(base, CLB_OUT4, `name`_CFG_OUTLUT_4);
    CLB_configOutputLUT(base, CLB_OUT5, `name`_CFG_OUTLUT_5);
    CLB_configOutputLUT(base, CLB_OUT6, `name`_CFG_OUTLUT_6);
    CLB_configOutputLUT(base, CLB_OUT7, `name`_CFG_OUTLUT_7);
% if (Common.isType1_Type2()) {
    // AOC
    CLB_configAOC(base, CLB_AOC0, `name`_OUTPUT_COND_CTR_0);
    CLB_configAOC(base, CLB_AOC1, `name`_OUTPUT_COND_CTR_1);
    CLB_configAOC(base, CLB_AOC2, `name`_OUTPUT_COND_CTR_2);
    CLB_configAOC(base, CLB_AOC3, `name`_OUTPUT_COND_CTR_3);
    CLB_configAOC(base, CLB_AOC4, `name`_OUTPUT_COND_CTR_4);
    CLB_configAOC(base, CLB_AOC5, `name`_OUTPUT_COND_CTR_5);
    CLB_configAOC(base, CLB_AOC6, `name`_OUTPUT_COND_CTR_6);
    CLB_configAOC(base, CLB_AOC7, `name`_OUTPUT_COND_CTR_7);
% }

    // LUT4
    CLB_selectLUT4Inputs(base, `name`_CFG_LUT4_IN0, `name`_CFG_LUT4_IN1, `name`_CFG_LUT4_IN2, `name`_CFG_LUT4_IN3);
    CLB_configLUT4Function(base, `name`_CFG_LUT4_FN10, `name`_CFG_LUT4_FN2);

    // FSM
    CLB_selectFSMInputs(base, `name`_CFG_FSM_EXT_IN0, `name`_CFG_FSM_EXT_IN1, `name`_CFG_FSM_EXTRA_IN0, `name`_CFG_FSM_EXTRA_IN1);
    CLB_configFSMNextState(base, `name`_CFG_FSM_NEXT_STATE_0, `name`_CFG_FSM_NEXT_STATE_1, `name`_CFG_FSM_NEXT_STATE_2);
    CLB_configFSMLUTFunction(base, `name`_CFG_FSM_LUT_FN10, `name`_CFG_FSM_LUT_FN2);

    // Counters
    CLB_selectCounterInputs(base, `name`_CFG_COUNTER_RESET, `name`_CFG_COUNTER_EVENT, `name`_CFG_COUNTER_MODE_0, `name`_CFG_COUNTER_MODE_1);
    CLB_configMiscCtrlModes(base, `name`_CFG_MISC_CONTROL);
    CLB_configCounterLoadMatch(base, CLB_CTR0, `name`_COUNTER_0_LOAD_VAL, `name`_COUNTER_0_MATCH1_VAL, `name`_COUNTER_0_MATCH2_VAL);
    CLB_configCounterLoadMatch(base, CLB_CTR1, `name`_COUNTER_1_LOAD_VAL, `name`_COUNTER_1_MATCH1_VAL, `name`_COUNTER_1_MATCH2_VAL);
    CLB_configCounterLoadMatch(base, CLB_CTR2, `name`_COUNTER_2_LOAD_VAL, `name`_COUNTER_2_MATCH1_VAL, `name`_COUNTER_2_MATCH2_VAL);
% if (Common.isType1_Type2()) {
    CLB_configCounterTapSelects(base, `name`_CFG_TAP_SEL);
% }

    // HLC
    CLB_configHLCEventSelect(base, `name`_HLC_EVENT_SEL);
    CLB_setHLCRegisters(base, `name`_HLC_R0_INIT, `name`_HLC_R1_INIT, `name`_HLC_R2_INIT, `name`_HLC_R3_INIT);

    for(i = 0; i <= CLB_NUM_HLC_INSTR; i++)
    {
        CLB_programHLCInstruction(base, i, `name`HLCInstr[i]);
    }
}

% }



