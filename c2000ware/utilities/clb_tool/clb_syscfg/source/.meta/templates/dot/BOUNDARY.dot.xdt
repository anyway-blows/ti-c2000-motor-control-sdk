%%{
    let inst      = args[0];
    let tileName  = args[1];
    let inputs    = args[2];
    let name      = tileName + "_BOUNDARY";
    let color     = 'black';
    let templ     = system.getTemplate;
    let Common    = system.getScript("/utilities/clb_tool/clb_syscfg/source/Common.js");
    let colonName = Common.colonName;

    function arrow(cfg) {
        switch (cfg) {
            case 'none':         return '&#x2192;';
            case 'rising edge' : return '&#x2191;';
            case 'falling edge': return '&#x2193;';
            case 'both edges'  : return '&#x2195;';
        }
    }
%%}
    `name` [label= <<TABLE BORDER='0' CELLBORDER='1' CELLSPACING='0'>
                       <TR><TD><b>`name`</b></TD></TR>
                       <TR><TD PORT='in0'>in0  `arrow(inst.in_edge0)`</TD></TR>
                       <TR><TD PORT='in1'>in1  `arrow(inst.in_edge1)`</TD></TR>
                       <TR><TD PORT='in2'>in2  `arrow(inst.in_edge2)`</TD></TR>
                       <TR><TD PORT='in3'>in3  `arrow(inst.in_edge3)`</TD></TR>
                       <TR><TD PORT='in4'>in4  `arrow(inst.in_edge4)`</TD></TR>
                       <TR><TD PORT='in5'>in5  `arrow(inst.in_edge5)`</TD></TR>
                       <TR><TD PORT='in6'>in6  `arrow(inst.in_edge6)`</TD></TR>
                       <TR><TD PORT='in7'>in7  `arrow(inst.in_edge7)`</TD></TR>
                   </TABLE>> color=`color` shape=plaintext]

    `name`_OUT [label= <<TABLE BORDER='0' CELLBORDER='1' CELLSPACING='0'>
                       <TR><TD><b>`name`</b></TD></TR>
                       <TR><TD PORT='out0'>out0</TD></TR>
                       <TR><TD PORT='out1'>out1</TD></TR>
                       <TR><TD PORT='out2'>out2</TD></TR>
                       <TR><TD PORT='out3'>out3</TD></TR>
                       <TR><TD PORT='out4'>out4</TD></TR>
                       <TR><TD PORT='out5'>out5</TD></TR>
                       <TR><TD PORT='out6'>out6</TD></TR>
                       <TR><TD PORT='out7'>out7</TD></TR>
                   </TABLE>> color=`color` shape=plaintext]

% for (let idx = 0; idx < 8; idx++) {
%    if (inst['in'+idx] == 'squareWave') {
`templ('squareWave.dot.xdt')(name+'.in'+idx, inst['in_period'+idx], inst['in_duty'+idx])`
%    }
% }

% for (let j = 0; j < inputs.length; ++j) {
%     let inName = inputs[j];
%     let inFrom = inst[inputs[j]];
%     if (inFrom == 'squareWave') continue;
%     if (inFrom == 'None')       continue;
%     if (inFrom == 'Custom')     continue; // TDB
%     if (inFrom.includes('TILE')) {
%          inFrom = inFrom.replace('BOUNDARY','BOUNDARY_OUT');
    `colonName(inFrom)`:e -> `name`:`inName`:w [color=`color`]
%     }
% }