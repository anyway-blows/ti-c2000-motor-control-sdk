%%{
    let Common    = system.getScript("/utilities/clb_tool/clb_syscfg/source/Common.js");
    let mod       = system.modules['/utilities/clb_tool/clb_syscfg/source/TILE'];
    let instances = mod.$instances;
    let templ     = system.getTemplate;
%%}
/*
 *  ======== clb.h ========
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */
#ifndef ti_clb_h
#define ti_clb_h

#include <stdint.h>

#ifdef __cplusplus
extern "C" {                // support C++ sources
#endif

// HLC Instruction Register Field definitions
#define HLC_OPCODE_R0 0x0
#define HLC_OPCODE_R1 0x1
#define HLC_OPCODE_R2 0x2
#define HLC_OPCODE_R3 0x3
#define HLC_OPCODE_C0 0x4
#define HLC_OPCODE_C1 0x5
#define HLC_OPCODE_C2 0x6

#define HLC_OPCODE_MOV    0x00
#define HLC_OPCODE_MOV_T1 0x01
#define HLC_OPCODE_MOV_T2 0x02
#define HLC_OPCODE_PUSH   0x03
#define HLC_OPCODE_PULL   0x04
#define HLC_OPCODE_ADD    0x05
#define HLC_OPCODE_SUB    0x06
#define HLC_OPCODE_INTR   0x07

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;
//---------------------------------------------------------------------------
// `name`
//---------------------------------------------------------------------------
% if (Common.isType2()) {
    % if (inst.pipeline_mode) {
#define `name`_PIPELINE_MODE 1
    % } else {
#define `name`_PIPELINE_MODE 0
    % }
% }
`templ('OUTLUT.h.xdt')(inst.OUTLUT_0, name, 0)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_1, name, 1)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_2, name, 2)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_3, name, 3)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_4, name, 4)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_5, name, 5)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_6, name, 6)`
`templ('OUTLUT.h.xdt')(inst.OUTLUT_7, name, 7)`

`templ('LUT.h.xdt')   (inst.LUT_0, inst.LUT_1, inst.LUT_2, name)`
`templ('FSM.h.xdt')   (inst.FSM_0, inst.FSM_1, inst.FSM_2, name)`
`templ('COUNTER.h.xdt') (inst.COUNTER_0, inst.COUNTER_1, inst.COUNTER_2, name)`
`templ('HLC.h.xdt')   (inst.HLC, name)`

%    if (Common.isType1_Type2()) {
`templ('AOC.h.xdt')   (inst.AOC_0, name, 0)`
`templ('AOC.h.xdt')   (inst.AOC_1, name, 1)`
`templ('AOC.h.xdt')   (inst.AOC_2, name, 2)`
`templ('AOC.h.xdt')   (inst.AOC_3, name, 3)`
`templ('AOC.h.xdt')   (inst.AOC_4, name, 4)`
`templ('AOC.h.xdt')   (inst.AOC_5, name, 5)`
`templ('AOC.h.xdt')   (inst.AOC_6, name, 6)`
`templ('AOC.h.xdt')   (inst.AOC_7, name, 7)`
%   }
% }

% for (let i = 0; i < instances.length; i++) { // for each TILE instance
%     let inst = instances[i];
%     let name = inst.$name;
void init`name`(uint32_t base);
% }

#ifdef __cplusplus
}
#endif

#endif // ti_clb_h
