%%{
    let Common    = system.getScript("/utilities/clb_tool/clb_syscfg/source/Common.js");
    let mod       = system.modules['/utilities/clb_tool/clb_syscfg/source/TILE'];
    let instances = mod.$instances;
    let templ     = system.getTemplate;
%%}

#ifdef CLB_SIM
/*
 *  ======== clb_systemc.cpp ========
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#include "systemc.h"

% var type = 1
% if (Common.isType1_Type2()){
% type = 2;
%     if (Common.isType2()){
%          type = 3;
%     }
% }
#define TYPE 	`type`

#include "CLB_LUT4_SC_model.h"
#include "CLB_counter_SC_model.h"
#include "CLB_OutputLUT_SC_model.h"
#include "CLB_HLC_SC_model.h"
#include "CLB_FSM_SC_model.h"
#include "CLB_Input_conditioner.h"
#include "squareWave.h"
#include "clb_config.h"

#if TYPE == 2

#include "CLB_counter_top_SC_model.h"
#include "CLB_FSM_top_SC_model.h"
#include "CLB_LUT4_top_SC_model.h"
#include "CLB_OutputLUT_top_SC_model.h"

#define DEVICE_CLB_OUTPUT_LUT   POTENZA_CLB_OUTPUT_LUT
#define DEVICE_CLB_HLC          POTENZA_CLB_HLC
#define DEVICE_CLB_LUT4         POTENZA_CLB_LUT4
#define DEVICE_CLB_FSM          POTENZA_CLB_FSM
#define DEVICE_CLB_COUNTER      POTENZA_CLB_COUNTER

#elif TYPE == 3

#include "CLB_counter_top_SC_model.h"
#include "CLB_FSM_top_SC_model.h"
#include "CLB_LUT4_top_SC_model.h"
#include "CLB_OutputLUT_top_SC_model.h"

#define DEVICE_CLB_OUTPUT_LUT   TENOR_CLB_OUTPUT_LUT
#define DEVICE_CLB_HLC          TENOR_CLB_HLC
#define DEVICE_CLB_LUT4         TENOR_CLB_LUT4
#define DEVICE_CLB_FSM          TENOR_CLB_FSM
#define DEVICE_CLB_COUNTER      TENOR_CLB_COUNTER

#elif   TYPE == 1

#define DEVICE_CLB_OUTPUT_LUT   SOPRANO_CLB_OUTPUT_LUT
#define DEVICE_CLB_HLC          SOPRANO_CLB_HLC
#define DEVICE_CLB_LUT4         SOPRANO_CLB_LUT4
#define DEVICE_CLB_FSM          SOPRANO_CLB_FSM
#define DEVICE_CLB_COUNTER      SOPRANO_CLB_COUNTER

#endif

#define i0 I0
#define i1 I1
#define i2 I2
#define i3 I3


SC_MODULE(Top)
{
    //Top Level Clock, Reset, Enable
    sc_clock              sc_top_clock;
    sc_signal<bool>       sc_top_reset;
    sc_signal<bool>       sc_top_enable;
    sc_signal<bool>       sc_zero;
    sc_signal<bool>       sc_one;

    % for (let i = 0; i < instances.length; i++) { // for each TILE instance
    %     let inst = instances[i];
    %     let name = inst.$name;
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_0,  name, 0, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_1,  name, 1, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_2,  name, 2, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_3,  name, 3, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_4,  name, 4, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_5,  name, 5, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_6,  name, 6, Common.inputs.OUTLUT)`
`templ('decl_OUTLUT.sim.xdt')  (inst.OUTLUT_7,  name, 7, Common.inputs.OUTLUT)`
`templ('decl_LUT.sim.xdt')     (inst.LUT_0,     name, 0, Common.inputs.LUT)`
`templ('decl_LUT.sim.xdt')     (inst.LUT_1,     name, 1, Common.inputs.LUT)`
`templ('decl_LUT.sim.xdt')     (inst.LUT_2,     name, 2, Common.inputs.LUT)`
`templ('decl_FSM.sim.xdt')     (inst.FSM_0,     name, 0, Common.inputs.FSM)`
`templ('decl_FSM.sim.xdt')     (inst.FSM_1,     name, 1, Common.inputs.FSM)`
`templ('decl_FSM.sim.xdt')     (inst.FSM_2,     name, 2, Common.inputs.FSM)`
`templ('decl_COUNTER.sim.xdt') (inst.COUNTER_0, name, 0, Common.inputs.COUNTER)`
`templ('decl_COUNTER.sim.xdt') (inst.COUNTER_1, name, 1, Common.inputs.COUNTER)`
`templ('decl_COUNTER.sim.xdt') (inst.COUNTER_2, name, 2, Common.inputs.COUNTER)`
`templ('decl_HLC.sim.xdt')     (inst.HLC,       name, 0, Common.inputs.HLC)`
`templ('decl_BOUNDARY.sim.xdt')(inst.BOUNDARY,  name, 0, Common.inputs.BOUNDARY)`
    % }

    sc_trace_file *tf;
    SC_HAS_PROCESS(Top);

    //Top Constructor
    Top(const sc_module_name &name, sc_trace_file *_tf):

    % for (let i = 0; i < instances.length; i++) { // for each TILE instance
    %     let inst = instances[i];
    %     let name = inst.$name;
`templ('ctor.sim.xdt') (inst.OUTLUT_0,  name+"_OUTLUT_0",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_1,  name+"_OUTLUT_1",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_2,  name+"_OUTLUT_2",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_3,  name+"_OUTLUT_3",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_4,  name+"_OUTLUT_4",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_5,  name+"_OUTLUT_5",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_6,  name+"_OUTLUT_6",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.OUTLUT_7,  name+"_OUTLUT_7",  Common.inputs.OUTLUT)`
`templ('ctor.sim.xdt') (inst.LUT_0,     name+"_LUT_0",     Common.inputs.LUT)`
`templ('ctor.sim.xdt') (inst.LUT_1,     name+"_LUT_1",     Common.inputs.LUT)`
`templ('ctor.sim.xdt') (inst.LUT_2,     name+"_LUT_2",     Common.inputs.LUT)`
`templ('ctor.sim.xdt') (inst.FSM_0,     name+"_FSM_0",     Common.inputs.FSM)`
`templ('ctor.sim.xdt') (inst.FSM_1,     name+"_FSM_1",     Common.inputs.FSM)`
`templ('ctor.sim.xdt') (inst.FSM_2,     name+"_FSM_2",     Common.inputs.FSM)`
`templ('ctor.sim.xdt') (inst.COUNTER_0, name+"_COUNTER_0", Common.inputs.COUNTER)`
`templ('ctor.sim.xdt') (inst.COUNTER_1, name+"_COUNTER_1", Common.inputs.COUNTER)`
`templ('ctor.sim.xdt') (inst.COUNTER_2, name+"_COUNTER_2", Common.inputs.COUNTER)`
`templ('ctor_HLC.sim.xdt') (inst.HLC,   name+"_HLC",       Common.inputs.HLC)`
`templ('ctor_BOUNDARY.sim.xdt') (inst.BOUNDARY, name,      Common.inputs.BOUNDARY)`
    % }
        sc_module(name),
        sc_top_clock("sc_top_clock", `mod.$static.clock_period`, SC_NS)
    {
        SC_THREAD(reset_generator);
        tf = _tf;

    % for (let i = 0; i < instances.length; i++) { // for each TILE instance
    %     let inst = instances[i];
    %     let name = inst.$name;
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_0,  name, 0, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_1,  name, 1, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_2,  name, 2, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_3,  name, 3, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_4,  name, 4, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_5,  name, 5, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_6,  name, 6, Common.inputs.OUTLUT)`
`templ('conn_OUTLUT.sim.xdt')  (inst.OUTLUT_7,  name, 7, Common.inputs.OUTLUT)`
`templ('conn_LUT.sim.xdt')     (inst.LUT_0,     name, 0, Common.inputs.LUT)`
`templ('conn_LUT.sim.xdt')     (inst.LUT_1,     name, 1, Common.inputs.LUT)`
`templ('conn_LUT.sim.xdt')     (inst.LUT_2,     name, 2, Common.inputs.LUT)`
`templ('conn_FSM.sim.xdt')     (inst.FSM_0,     name, 0, Common.inputs.FSM)`
`templ('conn_FSM.sim.xdt')     (inst.FSM_1,     name, 1, Common.inputs.FSM)`
`templ('conn_FSM.sim.xdt')     (inst.FSM_2,     name, 2, Common.inputs.FSM)`
`templ('conn_COUNTER.sim.xdt') (inst.COUNTER_0, name, 0, Common.inputs.COUNTER)`
`templ('conn_COUNTER.sim.xdt') (inst.COUNTER_1, name, 1, Common.inputs.COUNTER)`
`templ('conn_COUNTER.sim.xdt') (inst.COUNTER_2, name, 2, Common.inputs.COUNTER)`
`templ('conn_HLC.sim.xdt')     (inst.HLC,       name, 0, Common.inputs.HLC)`
`templ('conn_BOUNDARY.sim.xdt')(inst.BOUNDARY,  name, 0, Common.inputs.BOUNDARY)`
    % }

        sc_trace(tf, sc_top_clock, "sc_top_clock");
        sc_trace(tf, sc_top_reset, "sc_top_reset");
        sc_trace(tf, sc_top_enable, "sc_top_enable");
    }

    // Reset Generator Thread
    void reset_generator(void)
    {
        sc_top_reset.write(false);
        wait(`mod.$static.reset_duration`, SC_NS);
        sc_top_reset.write(true);
    }

    //SystemC End-Of-Elaboration function to connect the signals to constants
    void end_of_elaboration()
    {
        sc_top_enable.write((bool) 1);
        sc_zero.write((bool) 0);
        sc_one.write((bool) 1);
    % for (let i = 0; i < instances.length; i++) { // for each TILE instance
    %     let inst = instances[i];
    %     let name = inst.$name;
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_0,  name, 0, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_1,  name, 1, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_2,  name, 2, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_3,  name, 3, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_4,  name, 4, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_5,  name, 5, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_6,  name, 6, Common.inputs.OUTLUT)`
`templ('write_OUTLUT.sim.xdt')  (inst.OUTLUT_7,  name, 7, Common.inputs.OUTLUT)`
`templ('write_LUT.sim.xdt')     (inst.LUT_0,     name, 0, Common.inputs.LUT)`
`templ('write_LUT.sim.xdt')     (inst.LUT_1,     name, 1, Common.inputs.LUT)`
`templ('write_LUT.sim.xdt')     (inst.LUT_2,     name, 2, Common.inputs.LUT)`
`templ('write_FSM.sim.xdt')     (inst.FSM_0,     name, 0, Common.inputs.FSM)`
`templ('write_FSM.sim.xdt')     (inst.FSM_1,     name, 1, Common.inputs.FSM)`
`templ('write_FSM.sim.xdt')     (inst.FSM_2,     name, 2, Common.inputs.FSM)`
`templ('write_COUNTER.sim.xdt') (inst.COUNTER_0, name, 0, Common.inputs.COUNTER)`
`templ('write_COUNTER.sim.xdt') (inst.COUNTER_1, name, 1, Common.inputs.COUNTER)`
`templ('write_COUNTER.sim.xdt') (inst.COUNTER_2, name, 2, Common.inputs.COUNTER)`
`templ('write_HLC.sim.xdt')     (inst.HLC,       name, 0, Common.inputs.HLC)`
`templ('write_BOUNDARY.sim.xdt')(inst.BOUNDARY,  name, 0, Common.inputs.BOUNDARY)`
    % }
    }
};

//SystemC sc_main function
int sc_main(int argc, char *argv[])
{
    sc_trace_file *tf = sc_create_vcd_trace_file("CLB");
    tf->set_time_unit(1, SC_NS);
    Top top("top", tf);
    sc_start(`mod.$static.sim_duration`, SC_NS);
    sc_close_vcd_trace_file(tf);
    return 0;
}


#endif //CLB_SIM
